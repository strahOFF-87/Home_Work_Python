# Задача 1.

# Напишите программу, запрашивающую у пользователя число и подсчитывающую сумму
# натуральных положительных чисел от 1 до введенного пользователем значения.
# Сумма первых n положительных чисел может быть рассчитана по формуле:
# sum =  (n * (n + 1))/2.
from functools import reduce

n = int(input("Введите число n: "))
summa_n = (n * (n + 1)) / 2
print("Сумма натуральных положительных чисел =", summa_n)

counter = 0
for i in range(n + 1):
    counter += i
print(counter)

# def calculate_sum(n:def calculate_sum(n: int) -> int:
#     if n < 1:
#         raise ValueError('Input must be greater than 0')
#     return int((n * (n + 1)) / 2)
#
#
# n = int(input())
# print(f'Сумма от 1 до {n} равняется {calculate_sum(n)}')


# Задача 2. Калькулятор
# Составьте программу, которая запрашивает у пользователя 2 целых числа и выполняет операции:
# ●	арифметические: +, -, * , / , // , %, **, log10;
# ●	сравнение: <, <=, >, >=, !=, ==,
# выводя на экран результат каждого действия. В случае получение вещественного результата,
# округлите его до 2-х знаков после запятой (используя функцию round()).
# Подсказка. Функцию log10 вы найдете в модуле math.


import math


def my_calculate() -> tuple:
    a = int(input("Первое целое число: "))
    b = int(input("Второе целое число: "))
    return a, b


def output_my_calculate(a: float, b: float):
    print(f"Сумма: {a + b:.2f}")
    print(f"Разница: {a - b:.2f}")
    print(f"Произведение: {a * b:.2f}")
    print(f"Деление: {a / b:.2f}")
    print(f"Деление нацело: {a // b:.2f}")
    print(f"Модуль(Остаток от деления введенных чисел): {a % b:.2f}")
    print(f"Возведение в степень: {a ** b:.2f}")
    print(f"Возведение в степень введенных чисел: {pow(a, b):.2f}")
    print(f"Десятичный логарифм введенного первого числа: {math.log(a):.2f}")
    print(f"Десятичный логарифм введенного первого числа: {round(math.log(a), 3)}")
    print(f"Проверка чисел на равенство: {a == b}")
    print(f"Проверка чисел на неравенство: {a != b}")
    print(f"Больше (a > b): {a > b}")
    print(f"Меньше (a < b): {a < b}")
    print(f"Больше или равно (a >= b): {a >= b}")
    print(f"Меньше или равно (a <= b): {a <= b}")


if __name__ == '__main__':
    a, b = my_calculate()
    output_my_calculate(a, b)

# Вариант 2
# sum = int(a_1 + a_2)
# print("Сумма введенных чисел", sum)
#
# raz = int(a_1 - a_2)
# print("Разница введенных чисел", raz)
#
# proiz = int(a_1 * a_2)
# print("Произведение введенных чисел", proiz)
#
# delit = int(a_1 / a_2)
# print("Частное от деления введенных чисел", delit)
#
# ost = int(a_1 % a_2)
# print("Остаток от деления введенных чисел", ost)
#
# log = math.log(a_1)
# print("Десятичный логарифм введенного первого числа", log)
#
# stepen = pow(a_1, a_2)
# print("Возведение в степень введенных чисел", stepen)



# Задача 3.
# Вычислите значение следующего выражения (аргументы - целые числа и вводятся с клавиатуры):
# f =  ∛((x^5  + 7)/(|-6| ⋅ y))/(7 - z mod y)
# Округлите результат до 3-х знаков после запятой, используя функцию round().

x = float(input('Введите значение X: '))
y = float(input('Введите значение Y: '))
z = float(input('Введите значение z: '))

print(f"f = ∛((x^5+7)/(|-6|⋅y))/(7-z mod y). Ответ: {round(((x ** 5 + 7) / (abs(-6) * y) ** (1. / 3.)) / (7 - z % y), 3)}")

# x, y, z = map( int, input('x, y, z(через пробелы): ').split() )
# f = ( (x ** 5 + 7)/(abs(-6) * y) ** (1./3.) ) / (7 - z%y)
# print(round(f, 3))


# Задача 4.
# Дана электрическая цепь, состоящая из 2-х последовательно соединенных проводников (сопротивление каждого известно).
# Найти общее сопротивление цепи (округление результата необходимо выполнить до 1-го знака после запятой).

r1 = float(input('Введите сопротивление проводника r1: '))
r2 = float(input('Введите сопротивление проводника r2: '))
r = r1 + r2

print(f"Сопротивление цепи: {round((r), 1)}")

# elem_list = []
# for elem in range(3):
#     elem = int(input("Введите сопротивление номер " + str(elem + 1)))
#     elem_list.append(elem)
# print("При последовательном соединении общее сопротивление равно")
# x = sum(elem_list)
# print(str(x))


# Задача 5.
# Дано уравнение ax + b = 0 и отрезок [m;n].
# Ответьте на вопрос, попадает ли решение уравнения в указанный отрезок.

# def check_solution(a, b, m, n):
#     if a == 0:
#         return m < 0 or n < 0
#     else:
#         x = -b / a
#         return (m <= x <= n)


import math

a = float(input("Введите переменную 'a': "))
b = float(input("Введите переменную 'b': "))
m = float(input("Введите переменную 'm': "))
n = float(input("Введите переменную 'n': "))
x = -b / a

if x <= m or x >= n:
    print('Решение уравнения не принадлежит отрезку')
else:
    print('Решение уравнения принадлежит отрезку')

# Задача 6. Поездка по кругу
# Спортсмен решил потренироваться перед марафоном и покататься вокруг города на скорость.
# Длина дороги — 123 километра. # Спортсмен стартует с нулевого километра и едет со скоростью v километров в час.
# На какой отметке он остановится через t часов?
# Реализуйте программу, которая спрашивает у пользователя v и t и выводит целое число от 0 до 122 — номер километра,
# на котором остановится Спортсмен. Учтите, что он может прокатиться больше одного круга.


v = float(input("Введите скорость (км/ч): "))
t = float(input("Введите время (ч): "))
s = v * t
rounds = 0
while s >= 123:
    s -= 123
    rounds += 1

ost = s % 123
## rounds = int(ost // 123)
# if ost >= 123:
#     rounds = int(ost // 123)
#     ost %= 123

# print(f"Спортсмен прокатился {rounds} кругов и остановится на отметке {ost}, км.")
## print("Количество полных кругов:", rounds)
## print("На какой отметке остановится спортсмен:", ost, "км")
print(f"Пройдено {rounds} полных[ый] кругов[а] и {ost} км внутри последнего круга")


# Задача 7. Сумма и произведение цифр в числе
# Дано двузначное и трехзначное число.
# Для каждого выведите на экран сумму и произведение цифр

# Вариант 1
# a = 34
# b = 345
#
#
# def my_fank(n: int) -> tuple:
#     summ_a = 0
#     mul_a = 1
#     for i in str(n):
#         summ_a += int(i)
#         mul_a *= int(i)
#     return summ_a, mul_a, 3, 4, 5
#
#
# print(my_fank(a))
# print(my_fank(b))
#
# c, d, *g = my_fank(a)
# print(c, d, *g)


# Вариант 2
# def sum_digits(number):
#     str_number = str(number)
#     return sum(int(digit) for digit in str_number)
#
#
# def prod_digits(number):
#     str_number = str(number)
#     return int(reduce(lambda x, y: x * int(y), str_number))
#
#
# def main():
#     two_digit_number = int(input("Введите двузначное число: "))
#     three_digit_number = int(input("Введите трехзначное число: "))
#
#     print(f"Сумма цифр двузначного числа: {sum_digits(two_digit_number)}")
#     print(f"Сумма цифр трехначного числа: {sum_digits(three_digit_number)}")
#     print(f"Произведение цифр двузначного числа: {prod_digits(two_digit_number)}")
#     print(f"Произведение цифр трехначного числа: {prod_digits(three_digit_number)}")
#
# main()
# Почему не выводится запрос на ввод чисел?

def sum_digits(number):
    str_number = str(number)
    return sum(int(digit) for digit in str_number)


def prod_digits(number):
    str_number = str(number)
    return int(reduce(lambda x, y: x * int(y), str_number))


def main():
    two_digit_number = int(input("Введите двузначное число: "))
    digit21 = two_digit_number // 10
    digit22 = two_digit_number % 10
    three_digit_number = int(input("Введите трехзначное число: "))
    digit31 = three_digit_number // 100
    digit32 = (three_digit_number // 10) % 10
    digit33 = three_digit_number % 10

    print(f"Сумма цифр двузначного числа: {sum_digits(two_digit_number)}")
    print(f"Сумма цифр трехначного числа: {sum_digits(three_digit_number)}")
    print(f"Произведение цифр двузначного числа: {digit21 * digit22}")
    print(f"Произведение цифр трехначного числа: {digit31 * digit32 * digit33}")


main()


# Вариант 3
# def sum_digits(number):
#     str_number = str(number)
#     return sum(int(digit) for digit in str_number)
#
#
# def prod_digits(number):
#     str_number = str(number)
#     return int(reduce(lambda x, y: x * int(y), str_number, ))
#
#
# two_digit_number = int(input("Введите двузначное число: "))
# three_digit_number = int(input("Введите трехзначное число: "))
# print("Сумма цифр двузначного числа: ", sum_digits(two_digit_number))
# print("Произведение цифр двузначного числа: ", prod_digits(two_digit_number))
# three_sum = sum_digits(three_digit_number)
# three_prod = prod_digits(three_digit_number)
# print(f"Сумма цифр трёхзначного числа:{three_sum}\nПроизведение "
#       f"цифр трёхзначного числа:{three_prod}")


# Задача 8. Сортировка трех чисел
# Напишите программу, запрашивающую у пользователя три целых числа и выводящую их в упорядоченном виде – по возрастанию.
# Используйте функции min и max для нахождения наименьшего и наибольшего значений.
# Оставшееся число можно найти путем вычитания из суммы трех введенных чисел максимального и минимального.

def input_by_user():
    a = int(input("Первое целое число: "))
    b = int(input("Второе целое число: "))
    c = int(input("Третье целое число: "))
    return a, b, c


def result(a, b, c):
    minimum = min(a, b, c)
    maximum = max(a, b, c)
    medium = sum([a, b, c]) - minimum - maximum
    print(f"Отсортированные числа:", minimum, medium, maximum)


result(*input_by_user())

# Вариант 2
# def main():
#     a = int(input("Введите первое число: "))
#     b = int(input("Введите второе число: "))
#     c = int(input("Введите третье число: "))
#
#     if a > b:
#         max_num = a
#         min_num = b
#     else:
#         max_num = b
#         min_num = a
#
#     if c > max_num:
#         max_num = c
#     elif c < min_num:
#         min_num = c
#     else:
#         middle_num = c
#
#     result = [min_num, middle_num, max_num]
#     print("Отсортированные числа:", *result)

# main()


# Задача 9. Поменять местами: не всё так просто!
# Напишите программу, которая меняла бы значения двух переменных местами,
# но без использования третьей переменной и синтаксического сахара, а именно — без конструкции
# a, b = b, a
# В переменные будут вводиться только числа.
# a = int(input('Введите первое число: '))
# b = int(input('Введите второе число: '))
# print(a, b)
# # стереть эту строчку и вставить свой код здесь
# print(a, b)
# Изменять, удалять, менять местами 1-ю, 2-ю, 3-ю и последнюю строчки нельзя.
# Но между 3-ей и 4-ой строкой можно вставлять сколько угодно строк кода, не трогая последний принт.

a = int(input('Введите первое число: '))
b = int(input('Введите второе число: '))

temp = a
a = b
b = temp

print(a, b)

# Вариант 2
a = int(input('Введите первое число: '))
b = int(input('Введите второе число: '))
print(a, b)

a += b
b = a - b
a -= b

print(a, b)

# Задача 10.
# Составьте программу, которая запрашивает название футбольной команды и повторяет его на экране со словами
# ... - чемпион!
# После этого выполните:
# ●	используя операцию дублирования, нарисуйте черту (набор "-"), длиной, равной размеру названия команды;
# ●	преобразуйте строку в нижний регистр и выведите на экран:
# ○	длину наименования команды;
# ○	есть ли в наименовании команды буква "п" (True/False)?
# ○	сколько раз повторяется буква "а"?

# Variant 1
team_name = input("Введите название футбольной команды: ")
print(f"{team_name} - чемпион!")

line = "-" * len(team_name)
print(line)

team_name_lower = team_name.lower()
print(team_name_lower)

print(f"Длина наименования команды: {len(team_name)}")

contains_p = 'п' in team_name_lower
print(f"Наличие буквы 'п': {contains_p}")

count_a = team_name_lower.count("а")
print(f"Количество буквы 'а': {count_a}")


# Variant 2
def input_by_name_team(team_name: str) -> None:
    print(f'{team_name} - чемпион!')
    team_name_lower = team_name.lower()
    print(team_name_lower)
    print(len(team_name) * '-')
    print(f'Длина наименования футбольной команды = {len(team_name)}')
    if 'п' in team_name:
        print(f'Буква "п" есть, {True}')
    else:
        print(f'Буквы "п" нет :(, {False}')

    print(f'Буква "а" повторяется {team_name.count("а")} раз[а]')


if __name__ == '__main__':
    input_by_name_team(input('Введите название футбольной команды: \n'))



# Задача 11.
# Составьте программу, которая запрашивает название государства и его столицы, а затем выводит сообщение:
# Государство - ..., столица - ...
#
# На месте многоточий должны быть выведены соответствующие значения.


country = input("Введите название государства: ")
city = input("Введите название города: ")

print(f"Государство - {country}, столица {city} - ")


# Задача 12.
# Дано слово объектно-ориентированный. Используя индексацию и срезы составьте из него слова
# объект, ориентир, тир, кот, рента и выведите их на экран.

word = 'объектно-ориентированный'
# input(word)
print(word)
print(f"{word[0:6]}")
print(f"{word[9:17]}")
print(f"{word[14:17]}")
print(f"{word[4] + word[7] + word[14]}")
print(f"{word[4:16:5]}")
print(f"{word[10:14:2] + word[13:15] + word[19]}")


# Задача 13.
# Создайте 2 пустых списка и выполните операции, описанные в заготовке.

# Создать 2 пустых списка
a = [] # Удалите комментарий и допишите код
b = [] # Удалите комментарий и допишите код

# Добавить 2 вещественных числа (4.5 и 3.4) в список 'a' с помощью append
a.append(4.5) # Удалите комментарий и допишите код
a.append(3.4) # Удалите комментарий и допишите код
# Добавить 2 вещественных числа (8.7, 1.3) в список 'a' с помощью extend
a.extend([8.7, 1.3]) # Удалите комментарий и допишите код

# Добавить 2 вещественных числа (14.5, 3.4) в список 'b' с помощью append
# Удалите комментарий и допишите код
b.append(14.5)
b.append(3.4)
# Добавить 2 вещественных числа (8.7, 11.3) в список 'b'с помощью extend
# Удалите комментарий и допишите код
b.extend([8.7, 11.3])
# Вставить целое число 100 на 2-е и 4-е место списка 'a'
a.insert(1, 100) # Удалите комментарий и допишите код
a.insert(3, 100) # Удалите комментарий и допишите код

# Вставить целое число 200 на 1-е и 3-е место списка 'b'
# Удалите комментарий и допишите код
b.insert(0, 200)
b.insert(2, 200)

# Вывести списки на экран
print("Исходные списки:")
print("1-ый:", a) # Удалите комментарий и допишите код
print("2-ой:", b) # Удалите комментарий и допишите код

# Удалить первые элементы из списков 'a' и 'b'
del a[0] # Удалите комментарий и допишите код
del b[0] # Удалите комментарий и допишите код

# Удалить элемент 100 из списка 'a'
a.remove(100) # Удалите комментарий и допишите код
# Удалить элемент 200 из списка 'b'
b.remove(200) # Удалите комментарий и допишите код

# Вывести списки на экран
print("\nПосле удалений:")
print("1-ый:", a)
print("2-ой:", b)

# Создать множества из списков 'a' и 'b', а также их пересечение
sa = set(a)
sb = set (b) # Удалите комментарий и допишите код
sa_and_sb = sa & sb # Удалите комментарий и допишите код
sa_and_sb = sa.intersection(sb) # Удалите комментарий и допишите код

# Вывести экран уникальные элементы каждого списка и общие
print("\nУникальные элементы:")
print("1-ый:", sa)
print("2-ой:", sb)
print("общие:", sa_and_sb)

# Соединить списки 'a' и 'b'
c = a + b # Удалите комментарий и допишите код

# Отсортировать список 'c' по возрастанию и убыванию
c_asc = sorted(c) # Удалите комментарий и допишите код
c_desc = sorted(c, reverse=True) # Удалите комментарий и допишите код

# Среднее арифметическое элементов списка 'c', расположенных на четных местах
sr_ar = sum(c[1::2]) / len(c[1::2]) # Удалите комментарий и допишите код
# Среднее геометрическое элементов списка 'c', расположенных на нечетных местах
# sr_geom = sum(c[1::2]) / len(c[1::2]) # Удалите комментарий и допишите код
# sr_geom = math.pow(math.prod(c[1::2]), 1 / len(c[1::2])) # Удалите комментарий и допишите код
sr_geom = 1
for value in c[0::2]:
    sr_geom *= value
sr_geom = round(sr_geom**(1/len(c[0::2])), 2)

# Максимальный и минимальный элементы
c_max = max(c) # Удалите комментарий и допишите код
c_min = min(c) # Удалите комментарий и допишите код

# Вывести результаты на экран
print("\nИтоговые:")
print("3-й:", c)
print(f"Сортировка по возрастанию: ", c_asc)
print(f"Сортировка по убыванию: ", c_desc)
print(f"Среднее арифметическое = {sr_ar}, Среднее геометрическое = {sr_geom}")
print(f"Среднее геометрическое = ", sr_geom)
print(f"Максимальный элемент = , {c_max}, Минимальный элемент = , {c_min}")
print(f"Минимальный элемент = ", c_min)


# Задача 14.
# Создайте пустой словарь для хранения информации о себе и выполните операции, описанные в заготовке.
# В данной задаче все значения задаются в коде (без input())

# 1. Создание словаря
# Создать пустой словарь
info = {} # Удалите комментарий и допишите код

# Добавить значения для ключей "фио", "дата_рождения", "место_рождения"
info["фио"] = "Страхов Иван Геннадьевич" # Удалите комментарий и допишите код
info["дата_рождения"] = "01.05.1987" # Удалите комментарий и допишите код
info["место_рождения"] = "Москва" # Удалите комментарий и допишите код

# Напечатать словарь
print(info)

# Создать ключ "хобби" со значением = список из строк -
# наименований хобби (например "плавание" и т.д.)
info["хобби"] = ["Футбол", "Баскетбол", "Натольный тенис", "Путешествия"]

# Добавить "программирование" в список хобби
info["хобби"].append("Программирование")

# Создать ключ "животные" со значением = кортеж из строк -
# имен домашних животных (например "кошка Мурка" и т.д.)
info["животные"] = ("Собака Танос", "Собака Никки", "Рыбки разные")

# Создать ключ "ЕГЭ" и поместить в него пустой словарь
info["ЕГЭ"] = {}

# В словарь info["ЕГЭ"] добавить информацию о сданных экзаменах,
# где ключ - наименование предмета, а значение - количество баллов
info["ЕГЭ"]["Математика"] = 88
info["ЕГЭ"]["Русский язык"] = 75
info["ЕГЭ"]["Физика"] = 93
info["ЕГЭ"]["Английский язык"] = 65

# Добавить экзамен, который не был сдан, после чего удалить его
info["ЕГЭ"]["Литература"] = None
del info["ЕГЭ"]["Литература"]

# Создать ключ "вузы" и поместить в него пустой словарь
info["вузы"] = {}

# В словарь info["вузы"] добавить информацию о вузах,
# где ключ - аббревиатура вуза, а значение -
# количество баллов для специальности, на которую хотели поступить
info["вузы"]["МВТУ"] = 380
info["вузы"]["МАДИ"] = 350
info["вузы"]["МАТИ"] = 345


# 2. Вывод на экран
print("Данные:")
# Получившийся словарь
print("Словарь info: ", info)

# Список экзаменов ЕГЭ в алфавитном порядке
# (используйте метод ``keys()``, преобразовав результат в кортеж)
exams = tuple(sorted(info["ЕГЭ"].keys())) # Удалите комментарий и допишите код
print("Предметы:", exams)
# Список вузов в алфавитном порядке
uni = tuple(sorted(info["вузы"].keys())) # Удалите комментарий и допишите код
print("Вузы:", uni)

# 3. Ответы на вопросы
print("\nОтветы на вопросы:")

# Выделить имя из info["фио"]
name = info["фио"].split()[1] # Удалите комментарий и допишите код
# Начинается на гласную? (True/False)
starts_with_vowel = True if name[0] in "аеёиоуыэюя" else False # Удалите комментарий и допишите код
print("* мое имя начинается на гласную букву:", starts_with_vowel)

# Выделить месяц из info["дата_рождения"]
month = info["дата_рождения"].split(".")[1] # Удалите комментарий и допишите код
# Родился зимой или летом? (True/False)
born_in_winter_or_summer = True if month in (6, 7, 8) else False # Удалите комментарий и допишите код
print("* родился летом или зимой:", born_in_winter_or_summer)

# Количество хобби и первое из них
hobbies_count = len(info["хобби"])
# first_hobby = info("хобби"[0])
# print("* количество хобби:", hobbies_count)
# print("* первое хобби:", first_hobby)
print("* у меня {} хобби, первое \"{}\"".format(hobbies_count, info["хобби"][0]))

# Количество сданных экзаменов
print("* после окончания школы сдавал {} экз.".format(len(info["ЕГЭ"])))

# Сумма баллов по экзаменам
sum_mark = sum(info["ЕГЭ"].values())
print("* сумма баллов = {}".format(sum_mark))

# Максимальный балл среди сданных
max_mark = max(info["ЕГЭ"].values())
print("* макс. балл = {}".format(max_mark))

# Количество вузов, в которые Вы проходите по баллам
# Подсказка: определить, проходите Вы или нет, можно простым сравнением
# суммы баллов с проходным баллом вуза - ``True/False``.
# Для того, чтобы определить количество таких вузов, преобразуйте
# сравнение в целое число (используя ``int()``) и сложите все сравниваемые вузы.
vuz_count = len([value for value in info['вузы'].values() if value <= sum_mark])
print("* кол-во вузов в которые прохожу: {}".format(vuz_count))

# Количество животных и последнее из них
animals_count = len(info["животные"])
last_animal = info["животные"][-1]
print("* количество животных:", animals_count)
print("* последнее животное:", last_animal)